// <auto-generated />
using System;
using MediaHub.EntityFramewok;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaHub.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241118184332_MediaModelTables")]
    partial class MediaModelTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediaHub.Models.Actor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MediaHub.Models.ActorMovieInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieInfoId");

                    b.ToTable("ActorMovieInfos");
                });

            modelBuilder.Entity("MediaHub.Models.Anime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfEpisodes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId")
                        .IsUnique();

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("MediaHub.Models.AnimeStudio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeStudios");
                });

            modelBuilder.Entity("MediaHub.Models.AnimeStudioAnime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnimeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnimeStudioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("AnimeStudioId");

                    b.ToTable("AnimeStudioAnimes");
                });

            modelBuilder.Entity("MediaHub.Models.CollectionUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CollectionUserRoles");
                });

            modelBuilder.Entity("MediaHub.Models.ContentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContentStatuses");
                });

            modelBuilder.Entity("MediaHub.Models.Director", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MediaHub.Models.DirectorMovieInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("MovieInfoId");

                    b.ToTable("DirectorMovieInfos");
                });

            modelBuilder.Entity("MediaHub.Models.Evaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("MediaHub.Models.Film", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId")
                        .IsUnique();

                    b.HasIndex("MovieInfoId")
                        .IsUnique();

                    b.ToTable("Films");
                });

            modelBuilder.Entity("MediaHub.Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("EsrbRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("MetacriticRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PlaytimeHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("MediaHub.Models.GameDeveloper", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameDevelopers");
                });

            modelBuilder.Entity("MediaHub.Models.GameDeveloperGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameDeveloperId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameDeveloperId");

                    b.HasIndex("GameId");

                    b.ToTable("GameDeveloperGames");
                });

            modelBuilder.Entity("MediaHub.Models.GamePlatform", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("MediaHub.Models.GamePlatformGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GamePlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GamePlatformId");

                    b.ToTable("GamePlatformGames");
                });

            modelBuilder.Entity("MediaHub.Models.GamePublisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GamePublishers");
                });

            modelBuilder.Entity("MediaHub.Models.GamePublisherGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GamePublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GamePublisherId");

                    b.ToTable("GamePublisherGames");
                });

            modelBuilder.Entity("MediaHub.Models.GameTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameTags");
                });

            modelBuilder.Entity("MediaHub.Models.GameTagGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameTagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameTagId");

                    b.ToTable("GameTagGames");
                });

            modelBuilder.Entity("MediaHub.Models.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MediaHub.Models.GenreEvaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("RecommendationCollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("RecommendationCollectionId");

                    b.ToTable("GenreEvaluations");
                });

            modelBuilder.Entity("MediaHub.Models.Manga", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfChapters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfVolumes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId")
                        .IsUnique();

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MediaHub.Models.MangaAuthor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MangaAuthors");
                });

            modelBuilder.Entity("MediaHub.Models.MangaAuthorManga", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaAuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MangaAuthorId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaAuthorMangas");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPictureLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MediaContentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MediaContentTypeId");

                    b.ToTable("MediaContents");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentGenre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MediaContentId");

                    b.ToTable("MediaContentGenres");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentPicture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PictureLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId");

                    b.ToTable("MediaContentPictures");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MediaContentTypes");
                });

            modelBuilder.Entity("MediaHub.Models.MediaInteractionStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentStatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EvaluationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecommendationCollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContentStatusId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("MediaContentId");

                    b.HasIndex("RecommendationCollectionId");

                    b.ToTable("MediaInteractionStatuses");
                });

            modelBuilder.Entity("MediaHub.Models.MovieInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DurationInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.ToTable("MovieInfos");
                });

            modelBuilder.Entity("MediaHub.Models.RecommendationCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("RecommendationCollections");
                });

            modelBuilder.Entity("MediaHub.Models.RecommendationCollectionUserAccess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionUserRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecommendationCollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionUserRoleId");

                    b.HasIndex("RecommendationCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("RecommendationCollectionUserAccesses");
                });

            modelBuilder.Entity("MediaHub.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MediaHub.Models.Serial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediaContentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MovieInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfEpisodes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfSeasons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("MediaContentId")
                        .IsUnique();

                    b.HasIndex("MovieInfoId")
                        .IsUnique();

                    b.ToTable("Serials");
                });

            modelBuilder.Entity("MediaHub.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MediaHub.Models.ActorMovieInfo", b =>
                {
                    b.HasOne("MediaHub.Models.Actor", "Actor")
                        .WithMany("ActorMovieInfos")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.MovieInfo", "MovieInfo")
                        .WithMany("ActorMovieInfos")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("MovieInfo");
                });

            modelBuilder.Entity("MediaHub.Models.Anime", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithOne("Anime")
                        .HasForeignKey("MediaHub.Models.Anime", "MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("MediaHub.Models.AnimeStudioAnime", b =>
                {
                    b.HasOne("MediaHub.Models.Anime", "Anime")
                        .WithMany("AnimeStudioAnimes")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.AnimeStudio", "AnimeStudio")
                        .WithMany("AnimeStudiosAnimes")
                        .HasForeignKey("AnimeStudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("AnimeStudio");
                });

            modelBuilder.Entity("MediaHub.Models.DirectorMovieInfo", b =>
                {
                    b.HasOne("MediaHub.Models.Director", "Director")
                        .WithMany("DirectorMovieInfos")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.MovieInfo", "MovieInfo")
                        .WithMany("DirectorMovieInfos")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("MovieInfo");
                });

            modelBuilder.Entity("MediaHub.Models.Film", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithOne("Film")
                        .HasForeignKey("MediaHub.Models.Film", "MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.MovieInfo", "MovieInfo")
                        .WithOne("Film")
                        .HasForeignKey("MediaHub.Models.Film", "MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");

                    b.Navigation("MovieInfo");
                });

            modelBuilder.Entity("MediaHub.Models.Game", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithOne("Game")
                        .HasForeignKey("MediaHub.Models.Game", "MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("MediaHub.Models.GameDeveloperGame", b =>
                {
                    b.HasOne("MediaHub.Models.GameDeveloper", "GameDeveloper")
                        .WithMany("GameDeveloperGames")
                        .HasForeignKey("GameDeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.Game", "Game")
                        .WithMany("GameDeveloperGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameDeveloper");
                });

            modelBuilder.Entity("MediaHub.Models.GamePlatformGame", b =>
                {
                    b.HasOne("MediaHub.Models.Game", "Game")
                        .WithMany("GamePlatformGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.GamePlatform", "GamePlatform")
                        .WithMany("GamePlatformGames")
                        .HasForeignKey("GamePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GamePlatform");
                });

            modelBuilder.Entity("MediaHub.Models.GamePublisherGame", b =>
                {
                    b.HasOne("MediaHub.Models.Game", "Game")
                        .WithMany("GamePublisherGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.GamePublisher", "GamePublisher")
                        .WithMany("GamePublisherGames")
                        .HasForeignKey("GamePublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GamePublisher");
                });

            modelBuilder.Entity("MediaHub.Models.GameTagGame", b =>
                {
                    b.HasOne("MediaHub.Models.Game", "Game")
                        .WithMany("GameTagGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.GameTag", "GameTag")
                        .WithMany("GameTagGames")
                        .HasForeignKey("GameTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameTag");
                });

            modelBuilder.Entity("MediaHub.Models.GenreEvaluation", b =>
                {
                    b.HasOne("MediaHub.Models.Genre", "Genre")
                        .WithMany("GenreEvaluations")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.RecommendationCollection", "RecommendationCollection")
                        .WithMany("GenreEvaluations")
                        .HasForeignKey("RecommendationCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("RecommendationCollection");
                });

            modelBuilder.Entity("MediaHub.Models.Manga", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithOne("Manga")
                        .HasForeignKey("MediaHub.Models.Manga", "MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("MediaHub.Models.MangaAuthorManga", b =>
                {
                    b.HasOne("MediaHub.Models.MangaAuthor", "MangaAuthor")
                        .WithMany("MangaAuthorMangas")
                        .HasForeignKey("MangaAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.Manga", "Manga")
                        .WithMany("MangaAuthorMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("MangaAuthor");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContent", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContentType", "MediaContentType")
                        .WithMany("MediaContents")
                        .HasForeignKey("MediaContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaContentType");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentGenre", b =>
                {
                    b.HasOne("MediaHub.Models.Genre", "Genre")
                        .WithMany("MediaContentGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithMany("MediaContentGenres")
                        .HasForeignKey("MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentPicture", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithMany("MediaContentPictures")
                        .HasForeignKey("MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("MediaHub.Models.MediaInteractionStatus", b =>
                {
                    b.HasOne("MediaHub.Models.ContentStatus", "ContentStatus")
                        .WithMany("MediaInteractionStatuses")
                        .HasForeignKey("ContentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.Evaluation", "Evaluation")
                        .WithMany("MediaInteractionStatuses")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithMany("MediaInteractionStatuses")
                        .HasForeignKey("MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.RecommendationCollection", "RecommendationCollection")
                        .WithMany("MediaInteractionStatus")
                        .HasForeignKey("RecommendationCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentStatus");

                    b.Navigation("Evaluation");

                    b.Navigation("MediaContent");

                    b.Navigation("RecommendationCollection");
                });

            modelBuilder.Entity("MediaHub.Models.RecommendationCollection", b =>
                {
                    b.HasOne("MediaHub.Models.User", "Creator")
                        .WithMany("RecommendationCollections")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MediaHub.Models.RecommendationCollectionUserAccess", b =>
                {
                    b.HasOne("MediaHub.Models.CollectionUserRole", "CollectionUserRole")
                        .WithMany("RecommendationCollectionUserAccesses")
                        .HasForeignKey("CollectionUserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.RecommendationCollection", "RecommendationCollection")
                        .WithMany("RecommendationCollectionUserAccesses")
                        .HasForeignKey("RecommendationCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.User", "User")
                        .WithMany("RecommendationCollectionUserAccess")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollectionUserRole");

                    b.Navigation("RecommendationCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaHub.Models.Serial", b =>
                {
                    b.HasOne("MediaHub.Models.MediaContent", "MediaContent")
                        .WithOne("Serial")
                        .HasForeignKey("MediaHub.Models.Serial", "MediaContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.MovieInfo", "MovieInfo")
                        .WithOne("Serial")
                        .HasForeignKey("MediaHub.Models.Serial", "MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");

                    b.Navigation("MovieInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MediaHub.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MediaHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MediaHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MediaHub.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MediaHub.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaHub.Models.Actor", b =>
                {
                    b.Navigation("ActorMovieInfos");
                });

            modelBuilder.Entity("MediaHub.Models.Anime", b =>
                {
                    b.Navigation("AnimeStudioAnimes");
                });

            modelBuilder.Entity("MediaHub.Models.AnimeStudio", b =>
                {
                    b.Navigation("AnimeStudiosAnimes");
                });

            modelBuilder.Entity("MediaHub.Models.CollectionUserRole", b =>
                {
                    b.Navigation("RecommendationCollectionUserAccesses");
                });

            modelBuilder.Entity("MediaHub.Models.ContentStatus", b =>
                {
                    b.Navigation("MediaInteractionStatuses");
                });

            modelBuilder.Entity("MediaHub.Models.Director", b =>
                {
                    b.Navigation("DirectorMovieInfos");
                });

            modelBuilder.Entity("MediaHub.Models.Evaluation", b =>
                {
                    b.Navigation("MediaInteractionStatuses");
                });

            modelBuilder.Entity("MediaHub.Models.Game", b =>
                {
                    b.Navigation("GameDeveloperGames");

                    b.Navigation("GamePlatformGames");

                    b.Navigation("GamePublisherGames");

                    b.Navigation("GameTagGames");
                });

            modelBuilder.Entity("MediaHub.Models.GameDeveloper", b =>
                {
                    b.Navigation("GameDeveloperGames");
                });

            modelBuilder.Entity("MediaHub.Models.GamePlatform", b =>
                {
                    b.Navigation("GamePlatformGames");
                });

            modelBuilder.Entity("MediaHub.Models.GamePublisher", b =>
                {
                    b.Navigation("GamePublisherGames");
                });

            modelBuilder.Entity("MediaHub.Models.GameTag", b =>
                {
                    b.Navigation("GameTagGames");
                });

            modelBuilder.Entity("MediaHub.Models.Genre", b =>
                {
                    b.Navigation("GenreEvaluations");

                    b.Navigation("MediaContentGenres");
                });

            modelBuilder.Entity("MediaHub.Models.Manga", b =>
                {
                    b.Navigation("MangaAuthorMangas");
                });

            modelBuilder.Entity("MediaHub.Models.MangaAuthor", b =>
                {
                    b.Navigation("MangaAuthorMangas");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContent", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Film");

                    b.Navigation("Game");

                    b.Navigation("Manga");

                    b.Navigation("MediaContentGenres");

                    b.Navigation("MediaContentPictures");

                    b.Navigation("MediaInteractionStatuses");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("MediaHub.Models.MediaContentType", b =>
                {
                    b.Navigation("MediaContents");
                });

            modelBuilder.Entity("MediaHub.Models.MovieInfo", b =>
                {
                    b.Navigation("ActorMovieInfos");

                    b.Navigation("DirectorMovieInfos");

                    b.Navigation("Film");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("MediaHub.Models.RecommendationCollection", b =>
                {
                    b.Navigation("GenreEvaluations");

                    b.Navigation("MediaInteractionStatus");

                    b.Navigation("RecommendationCollectionUserAccesses");
                });

            modelBuilder.Entity("MediaHub.Models.User", b =>
                {
                    b.Navigation("RecommendationCollectionUserAccess");

                    b.Navigation("RecommendationCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
